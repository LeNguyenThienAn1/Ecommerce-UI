import { useEffect, useState, useCallback } from "react";
import { ChatApi } from "../../api/chatApi";
import { connection } from "../../signalr/chatHub"; // Import k·∫øt n·ªëi SignalR

export default function ChatWindow({ currentUserId, receiver }) {
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState("");

    // 1. T·∫¢I L·ªäCH S·ª¨ TIN NH·∫ÆN (d√πng useCallback ƒë·ªÉ t·ªëi ∆∞u)
    const loadMessages = useCallback(async () => {
        // Ch·ªâ t·∫£i khi c√≥ th√¥ng tin ng∆∞·ªùi nh·∫≠n
        if (!receiver?.id) {
            setMessages([]); // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n, x√≥a tin nh·∫Øn c≈©
            return;
        }

        try {
            // G·ªçi h√†m API ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë√∫ng v·ªõi endpoint
            const res = await ChatApi.getMessages(receiver.id);
            // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ m·ªôt m·∫£ng tin nh·∫Øn c√≥ thu·ªôc t√≠nh `id` duy nh·∫•t
            setMessages(res.data || []);
        } catch (err) {
            console.error("‚ùå L·ªói khi t·∫£i tin nh·∫Øn:", err);
            setMessages([]); // Set v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
        }
    }, [receiver?.id]); // Ph·ª• thu·ªôc v√†o ID c·ªßa ng∆∞·ªùi nh·∫≠n

    // useEffect ƒë·ªÉ g·ªçi h√†m loadMessages khi ng∆∞·ªùi nh·∫≠n thay ƒë·ªïi
    useEffect(() => {
        loadMessages();
    }, [loadMessages]);

    // 2. L·∫ÆNG NGHE TIN NH·∫ÆN REAL-TIME T·ª™ SIGNALR
    useEffect(() => {
        // ƒê·∫£m b·∫£o connection ƒë√£ t·ªìn t·∫°i
        if (!connection) {
            return;
        }

        // H√†m x·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi
        const receiveMessageHandler = (msg) => {
            // Ki·ªÉm tra tin nh·∫Øn c√≥ thu·ªôc cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i kh√¥ng
            const isRelevant =
                (msg.senderId === receiver?.id && msg.receiverId === currentUserId) ||
                (msg.senderId === currentUserId && msg.receiverId === receiver?.id);

            if (isRelevant) {
                // Ch·ªëng tr√πng l·∫∑p: Ch·ªâ th√™m tin nh·∫Øn n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i trong state
                setMessages((prevMessages) => {
                    if (!prevMessages.some((m) => m.id === msg.id)) {
                        return [...prevMessages, msg];
                    }
                    return prevMessages; // Tr·∫£ v·ªÅ state c≈© n·∫øu tin nh·∫Øn ƒë√£ t·ªìn t·∫°i
                });
            }
        };

        connection.on("ReceiveMessage", receiveMessageHandler);

        // CLEANUP: G·ª° b·ªè listener khi component unmount ho·∫∑c receiver thay ƒë·ªïi
        return () => {
            connection.off("ReceiveMessage", receiveMessageHandler);
        };
    }, [receiver?.id, currentUserId]); // Ph·ª• thu·ªôc v√†o ng∆∞·ªùi nh·∫≠n v√† ng∆∞·ªùi d√πng hi·ªán t·∫°i

    // 3. G·ª¨I TIN NH·∫ÆN M·ªöI
    const handleSend = async () => {
        if (!newMessage.trim() || !receiver?.id) return;

        const messageData = {
            receiverId: receiver.id,
            message: newMessage.trim(),
        };

        try {
            // G·ª≠i tin nh·∫Øn qua API
            await ChatApi.sendMessage(messageData);
            
            // X√≥a n·ªôi dung trong √¥ input sau khi g·ª≠i th√†nh c√¥ng
            setNewMessage("");

            // L∆ØU √ù: Kh√¥ng c·∫ßn t·ª± th√™m tin nh·∫Øn v√†o state ·ªü ƒë√¢y n·ªØa (Optimistic UI)
            // v√¨ server s·∫Ω g·ª≠i l·∫°i tin nh·∫Øn ƒë√≥ qua SignalR v√† useEffect ·ªü tr√™n s·∫Ω b·∫Øt ƒë∆∞·ª£c n√≥.
            // ƒêi·ªÅu n√†y gi√∫p ƒë·∫£m b·∫£o d·ªØ li·ªáu lu√¥n ƒë·ªìng b·ªô v·ªõi server v√† ch·ªëng tr√πng l·∫∑p.

        } catch (err) {
            console.error("‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i:", err);
            // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng ·ªü ƒë√¢y
        }
    };

    return (
        <div className="flex flex-col h-full bg-white border border-gray-200 rounded-xl shadow-lg">
            {/* Header */}
            <div className="p-4 border-b font-semibold text-lg text-blue-600 bg-gray-50 rounded-t-xl">
                üí¨ ƒêang chat v·ªõi: {receiver?.fullName || "H·ªó tr·ª£"}
            </div>

            {/* N·ªôi dung tin nh·∫Øn */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
                {messages.map((msg) => (
                    <div
                        // ‚úÖ S·ª¨ D·ª§NG ID DUY NH·∫§T L√ÄM KEY
                        key={msg.id}
                        className={`flex ${
                            msg.senderId === currentUserId ? "justify-end" : "justify-start"
                        }`}
                    >
                        <div
                            className={`px-4 py-2 rounded-xl max-w-[70%] shadow-md text-sm break-words ${
                                msg.senderId === currentUserId
                                    ? "bg-blue-500 text-white rounded-br-none"
                                    : "bg-gray-200 text-gray-800 rounded-tl-none"
                            }`}
                        >
                            {msg.message || msg.content}
                            <p className="text-xs mt-1 opacity-80 text-right">
                                {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </p>
                        </div>
                    </div>
                ))}
            </div>

            {/* √î nh·∫≠p tin */}
            <div className="p-4 border-t flex gap-2 bg-white rounded-b-xl">
                <input
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    className="flex-1 border border-gray-300 rounded-lg px-4 py-2.5 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
                    onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault(); // NgƒÉn xu·ªëng d√≤ng khi nh·∫•n Enter
                            handleSend();
                        }
                    }}
                />
                <button
                    onClick={handleSend}
                    className="bg-blue-600 text-white px-5 py-2.5 rounded-lg font-semibold hover:bg-blue-700 transition shadow-md disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={!newMessage.trim()}
                >
                    G·ª≠i
                </button>
            </div>
        </div>
    );
}