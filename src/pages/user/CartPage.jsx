import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  getCart,
  updateQuantity,
  removeFromCart,
  clearCart
} from "../../services/cartService";
import { useAuth } from "../../context/AuthContext";

export default function CartPage() {
  // L·∫•y th√¥ng tin user v√† tr·∫°ng th√°i x√°c th·ª±c t·ª´ Context
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const navigate = useNavigate();

  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showCheckoutForm, setShowCheckoutForm] = useState(false);

  // üßæ State cho th√¥ng tin tr√™n h√≥a ƒë∆°n (form)
  const [billInfo, setBillInfo] = useState({
    name: "",
    address: "",
    phoneNumber: "",
    paymentMethod: "COD", // M·∫∑c ƒë·ªãnh l√† COD
    note: ""
  });

  // üõí T·∫£i gi·ªè h√†ng t·ª´ localStorage khi component ƒë∆∞·ª£c render
  useEffect(() => {
    setCart(getCart());
  }, []);

  // T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin ng∆∞·ªùi d√πng v√†o form n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (isAuthenticated && user) {
      setBillInfo(prev => ({
        ...prev,
        name: user.name || "",
        phoneNumber: user.phoneNumber || "",
        address: user.address || "" // Th√™m c·∫£ ƒë·ªãa ch·ªâ n·∫øu c√≥
      }));
    }
  }, [isAuthenticated, user]);

  // --- C√ÅC H√ÄM X·ª¨ L√ù GI·ªé H√ÄNG ---

  const handleQuantityChange = (id, change) => {
    updateQuantity(id, change);
    setCart(getCart());
  };

  const handleRemove = (id) => {
    removeFromCart(id);
    setCart(getCart());
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setBillInfo((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  // --- H√ÄM THANH TO√ÅN QUAN TR·ªåNG NH·∫§T ---

  const handleCheckout = async (e) => {
    e.preventDefault();

    // 1. Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt
    const token = localStorage.getItem("accessToken");
    if (!isAuthenticated || !user || !user.id || !token) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng!");
      navigate('/login');
      return;
    }
    if (cart.length === 0) {
      alert("üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
      return;
    }
    if (!billInfo.name || !billInfo.address || !billInfo.phoneNumber) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng th√¥ng tin b·∫Øt bu·ªôc (*)");
      return;
    }

    setLoading(true);

    try {
      // ‚úÖ 2. T·∫†O REQUEST BODY KH·ªöP V·ªöI Y√äU C·∫¶U C·ª¶A BACKEND
      // C·∫•u tr√∫c n√†y ƒë√£ ho√†n to√†n ch√≠nh x√°c
      const requestBody = {
        order: {
          productIds: cart.flatMap((item) => Array(item.quantity).fill(item.id)),
          boughtBy: user.id // L·∫•y ID t·ª´ user object trong AuthContext
        },
        bill: {
          name: billInfo.name,
          address: billInfo.address,
          phoneNumber: billInfo.phoneNumber,
          paymentMethod: billInfo.paymentMethod,
          note: billInfo.note
        }
      };

      // 3. G·ª≠i request l√™n server
      const response = await fetch("https://localhost:7165/api/Order", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng!" }));
        throw new Error(errorData.title || errorData.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      }

      const result = await response.json();
      alert(`‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!\nM√£ ƒë∆°n h√†ng c·ªßa b·∫°n l√†: ${result.orderId}`);

      // 4. D·ªçn d·∫πp v√† chuy·ªÉn h∆∞·ªõng
      clearCart();
      navigate(`/order-success/${result.orderId}`);

    } catch (error) {
      console.error("L·ªói khi ƒë·∫∑t h√†ng:", error);
      alert(`‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // --- T√çNH TO√ÅN V√Ä RENDER ---

  const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  if (authLoading) {
    return <div className="text-center mt-10">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</div>;
  }

  if (!isAuthenticated) {
    return (
      <div className="text-center mt-10">
        <p className="text-gray-600 text-lg">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng.</p>
        <button onClick={() => navigate('/login')} className="text-blue-600 bg-blue-100 px-4 py-2 rounded-lg hover:underline mt-3">
          ƒê·∫øn trang ƒëƒÉng nh·∫≠p
        </button>
      </div>
    );
  }
  
  if (cart.length === 0) {
    return (
      <div className="text-center mt-10">
        <p className="text-gray-600 text-lg">üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
        <button onClick={() => navigate("/")} className="text-blue-600 hover:underline mt-3">
          ‚Üê Ti·∫øp t·ª•c mua s·∫Øm
        </button>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">üõçÔ∏è Gi·ªè h√†ng c·ªßa b·∫°n</h1>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* ==== C·ªôt tr√°i: Danh s√°ch s·∫£n ph·∫©m ==== */}
        <div className="lg:col-span-2 bg-white rounded-lg shadow p-6">
          <div className="space-y-4">
            {cart.map((item) => (
              <div key={item.id} className="flex items-center gap-4 border-b pb-4 last:border-b-0">
                <img src={item.imageUrl || "https://via.placeholder.com/80"} alt={item.name} className="w-20 h-20 object-cover rounded" />
                <div className="flex-1">
                  <h2 className="font-semibold text-lg">{item.name}</h2>
                  <p className="text-green-600 font-medium">{item.price.toLocaleString()} ƒë</p>
                </div>
                <div className="flex items-center gap-2">
                  <button onClick={() => handleQuantityChange(item.id, -1)} className="w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded">-</button>
                  <span className="w-8 text-center font-semibold">{item.quantity}</span>
                  <button onClick={() => handleQuantityChange(item.id, 1)} className="w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded">+</button>
                </div>
                <button onClick={() => handleRemove(item.id)} className="text-red-600 hover:text-red-700 font-medium">X√≥a</button>
              </div>
            ))}
          </div>
        </div>

        {/* ==== C·ªôt ph·∫£i: Th√¥ng tin thanh to√°n ==== */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow p-6 sticky top-6">
            <h2 className="text-xl font-bold mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
            <div className="space-y-2 mb-4">
              <div className="flex justify-between">
                <span className="text-gray-600">T·∫°m t√≠nh:</span>
                <span className="font-semibold">{total.toLocaleString()} ƒë</span>
              </div>
              <div className="border-t pt-2 flex justify-between text-lg">
                <span className="font-bold">T·ªïng c·ªông:</span>
                <span className="font-bold text-green-600">{total.toLocaleString()} ƒë</span>
              </div>
            </div>

            {!showCheckoutForm ? (
              <button onClick={() => setShowCheckoutForm(true)} className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-semibold">
                Ti·∫øn h√†nh thanh to√°n
              </button>
            ) : (
              <form onSubmit={handleCheckout} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">H·ªç v√† t√™n *</label>
                  <input type="text" name="name" value={billInfo.name} onChange={handleInputChange} required className="w-full px-3 py-2 border rounded-lg" />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">ƒê·ªãa ch·ªâ *</label>
                  <textarea name="address" value={billInfo.address} onChange={handleInputChange} rows="2" required className="w-full px-3 py-2 border rounded-lg" />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">S·ªë ƒëi·ªán tho·∫°i *</label>
                  <input type="tel" name="phoneNumber" value={billInfo.phoneNumber} onChange={handleInputChange} required className="w-full px-3 py-2 border rounded-lg" />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Ghi ch√∫</label>
                  <textarea name="note" value={billInfo.note} onChange={handleInputChange} rows="2" className="w-full px-3 py-2 border rounded-lg" placeholder="Ghi ch√∫ cho ng∆∞·ªùi b√°n..." />
                </div>
                <div className="flex gap-2">
                  <button type="button" onClick={() => setShowCheckoutForm(false)} className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg hover:bg-gray-300 font-semibold">H·ªßy</button>
                  <button type="submit" disabled={loading} className="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-semibold disabled:opacity-50">
                    {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒê·∫∑t h√†ng"}
                  </button>
                </div>
              </form>
            )}
            <button onClick={() => navigate("/")} className="block w-full text-center text-blue-600 hover:underline mt-4">
              ‚Üê Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}